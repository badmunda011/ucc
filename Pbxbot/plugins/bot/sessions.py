from pyrogram import Client, filters
from pyrogram.errors import SessionPasswordNeeded
from pyrogram.types import WebAppInfo
from pyrogram.types import Message, ReplyKeyboardRemove
import asyncio
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardRemove,
)

from ..btnsG import gen_inline_keyboard, start_button
from ..btnsK import session_keyboard
from . import START_MSG, BotHelp, Config, Symbols, db, Pbxbot

@Pbxbot.bot.on_message(
    filters.command("session"))
async def session_menu(_, message: Message):
    await message.reply_text(
        "**ü§° P ü·¥á·¥Äs·¥á ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä…¥ ·¥è·¥ò·¥õ…™·¥è…¥ “ì Ä·¥è·¥ç  ô·¥á ü·¥è·¥° üëª**",
        reply_markup=session_keyboard(),
    )

# New Bot add session 
@Pbxbot.bot.on_message(filters.command("addbot") & filters.private)
async def add_bot(_, message: Message):
    """Command to add a bot by its token."""
    parts = message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1]:
        return await message.reply_text("**Error!** Please provide a valid bot token.")
    
    bot_token = parts[1]
    try:
        # Initialize the bot client
        bot_client = Client(
            name="PbxBotClone",
            api_id=Config.API_ID,
            api_hash=Config.API_HASH,
            bot_token=bot_token,
            plugins=dict(root="Pbxbot.bad"),  # Import plugins from the `bad` folder
        )
        await bot_client.start()
        me = await bot_client.get_me()

        # Save the bot session in the database
        await db.update_bot_session(me.id, bot_token)

        LOGS.info(f"Started Bot: {me.username}")
        await bot_client.stop()

        await message.reply_text(
            f"**Success!** Bot `{me.username}` has been added and is ready to use."
        )
    except Exception as e:
        await message.reply_text(f"**Error!** {e}")
        

# New command to add session string manually
@Pbxbot.bot.on_message(filters.command("add") & filters.private)
async def add_session(_, message: Message):
    parts = message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1]:
        return await message.reply_text("**Error!** Please provide a valid session string.")
    
    session_string = parts[1]
    try:
        client = Client(
            name="Pbxbot 2.0",
            session_string=session_string,
            api_id=Config.API_ID,
            api_hash=Config.API_HASH,
            in_memory=True,
        )
        await client.connect()
        user_id = (await client.get_me()).id
        await db.update_session(user_id, session_string)
        await client.disconnect()
        await message.reply_text(
            "**s·¥ú·¥Ñ·¥Ñ·¥áss!** S·¥áss…™·¥è…¥ s·¥õ Ä…™…¥…¢ ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. Y·¥è·¥ú ·¥Ñ·¥Ä…¥ …¥·¥è·¥° ·¥ús·¥á ·¥ò ôx ô·¥è·¥õ 2.0 ·¥è…¥ ·¥õ ú…™s ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ä“ì·¥õ·¥á Ä  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ.\n\n** Ä·¥ás·¥õ·¥Ä Ä·¥õ** ·¥Ö·¥ç …¥·¥è·¥° ·¥ç è ·¥Ö·¥á·¥† . [‚ô°¬≥_ü´ßùÜºÍØ≠À∂ÕüÕù÷ü·çùŒ≤ùù∞ÍØ≠‚Äåùûâ ÍØ≠ùù°ÍØ≠ùûÑÍØ≠ùûåùûâÍØ≠ùù∫ÍØ≠ùÜºÍØ≠üç∑‚îº‚ù§Ô∏è‡ºÜ](https://t.me/PBX_CHAT/121567) üôà‚ù§Ô∏è."
        )
    except Exception as e:
        await message.reply_text(f"**Error!** {e}")


@Pbxbot.bot.on_message(filters.regex(r"…¥·¥á·¥° üîÆ"))
async def new_session(_, message: Message):
    await message.reply_text(
        "**ùñÆùóÑùñ∫ùóí!** ùñ´ùñæùóç'ùóå ùóåùñæùóçùóéùóâ ùñ∫ ùóáùñæùóê ùóåùñæùóåùóåùóÇùóàùóá",
        reply_markup=ReplyKeyboardRemove(),
    )

    buttons = [
        [
            InlineKeyboardButton(
                " ·¥ò ôx 2.0 s·¥áss…™·¥è…¥", 
                web_app=WebAppInfo(url="https://telegram.tools/session-string-generator#pyrogram,user")
            ),
        ]
    ]

    await message.reply_text(
        "**üëª Genrate Pyrogram String Session :**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )

@Pbxbot.bot.on_message(
    filters.regex(r"·¥Ö·¥á ü·¥á·¥õ·¥á üö´") & Config.AUTH_USERS & filters.private
)
async def delete_session(_, message: Message):
    all_sessions = await db.get_all_sessions()
    if not all_sessions:
        return await message.reply_text("ùñ≠ùóà ùóåùñæùóåùóåùóÇùóàùóáùóå ùñøùóàùóéùóáùñΩ ùóÇùóá ùñΩùñ∫ùóçùñ∫ùñªùñ∫ùóåùñæ.")

    collection = []
    for i in all_sessions:
        collection.append((i["user_id"], f"rm_session:{i['user_id']}"))

    buttons = gen_inline_keyboard(collection, 2)
    buttons.append([InlineKeyboardButton("Cancel ‚ùå", "auth_close")])

    await message.reply_text(
        "**ùñ¢ùóÅùóàùóàùóåùñæ ùñ∫ ùóåùñæùóåùóåùóÇùóàùóá ùóçùóà ùñΩùñæùóÖùñæùóçùñæ:**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@Pbxbot.bot.on_callback_query(filters.regex(r"rm_session"))
async def rm_session_cb(client: Client, cb: CallbackQuery):
    collection = []
    user_id = int(cb.data.split(":")[1])
    all_sessions = await db.get_all_sessions()

    if not all_sessions:
        return await cb.message.delete()

    try:
        owner = await client.get_users(Config.OWNER_ID)
        owner_id = owner.id
        owner_name = owner.first_name
    except:
        owner_id = Config.OWNER_ID
        owner_name = "ùñÆùóêùóáùñæùóã"
    if cb.from_user.id not in [user_id, owner_id]:
        return await cb.answer(
            f"ùñ†ùñºùñºùñæùóåùóå ùóãùñæùóåùóçùóãùóÇùñºùóçùñæùñΩ ùóçùóà ùñ∫ùóáùóàùóçùóÅùñæùóã ùóéùóåùñæùóãùóå. Only {owner_name} and session client can delete this session!",
            show_alert=True,
        )

    await db.rm_session(user_id)
    await cb.answer("**ùñ≤ùóéùñºùñºùñæùóåùóå!** ùñ≤ùñæùóåùóåùóÇùóàùóá ùñΩùñæùóÖùñæùóçùñæùñΩ ùñøùóãùóàùóÜ ùñΩùñ∫ùóçùñ∫ùñªùñ∫ùóåùñæ. \n__Restart the bot to apply changes.__", show_alert=True)

    for i in all_sessions:
        collection.append((i["user_id"], f"rm_session:{i['user_id']}"))

    buttons = gen_inline_keyboard(collection, 2)
    buttons.append([InlineKeyboardButton("Cancel ‚ùå", "auth_close")])

    await cb.message.edit_reply_markup(InlineKeyboardMarkup(buttons))


@Pbxbot.bot.on_message(filters.regex(r" ü…™s·¥õ üìÑ"))
async def list_sessions(_, message: Message):
    all_sessions = await db.get_all_sessions()
    if not all_sessions:
        return await message.reply_text("ùñ≠ùóà ùóåùñæùóåùóåùóÇùóàùóáùóå ùñøùóàùóéùóáùñΩ ùóÇùóá ùñΩùñ∫ùóçùñ∫ùñªùñ∫ùóåùñæ.")

    text = f"**{Symbols.cross_mark} ùñ´ùóÇùóåùóç ùóàùñø ùóåùñæùóåùóåùóÇùóàùóáùóå:**\n\n"
    for i, session in enumerate(all_sessions):
        text += f"[{'0' if i <= 9 else ''}{i+1}] {Symbols.bullet} **ùñ¥ùóåùñæùóã ùñ®ùñ£:** `{session['user_id']}`\n"

    await message.reply_text(text)


@Pbxbot.bot.on_message(filters.regex(r" ú·¥è·¥ç·¥á ‚öúÔ∏è"))
async def go_home(_, message: Message):
    await message.reply_text(
        "**Home üè†**",
        reply_markup=ReplyKeyboardRemove(),
    )
    await message.reply_text(
        START_MSG.format(message.from_user.mention),
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(start_button()),
    )

@Pbxbot.bot.on_message(filters.regex(r"·¥Ä·¥Ö·¥Ö s·¥áss…™·¥è…¥ ü•≥"))
async def session_add(_, message: Message):
    await message.reply_text("/add {·¥ò·¥Äs·¥õ·¥á  è·¥è·¥ú Ä ·¥ò ôx 2.0 s·¥áss…™·¥è…¥} ‚úì ‚ù§Ô∏è")  


BotHelp("Sessions").add(
    "session", "This command is packed with tools to manage userbot sessions."
).info(
    "Session üöÄ"
).done()    
